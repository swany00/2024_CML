---
title: "에너지사용량 자료 분석"
author: "본인이름~"
format: dashboard
execute: 
  enabled: true
  cache: false
  freeze: false
  error: true
---

```{python}
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.io as pio
import json
import requests
import folium
import json
import pandas as pd
import xarray as xr

pd.options.plotting.backend = "plotly"
pio.templates.default = "plotly_white"

global_dict = json.loads(requests.get('https://raw.githubusercontent.com/southkorea/southkorea-maps/master/kostat/2018/json/skorea-provinces-2018-geo.json').text)
local_dict = json.loads(requests.get('https://raw.githubusercontent.com/southkorea/southkorea-maps/master/kostat/2018/json/skorea-municipalities-2018-geo.json').text)

# combined_production_index 읽기
com_product_idx = 'https://github.com/swany00/2024_CML/raw/refs/heads/main/combined_production_index.nc'
com_product_idx = xr.open_dataset(com_product_idx)
production_index = com_product_idx['production_index']
prod_index_first_time = production_index.isel(time=0)

# cwd 읽기
cwd = 'https://github.com/swany00/2024_CML/raw/refs/heads/main/combined_extreme_rainfall_average_cwd.nc'
cwd = xr.open_dataset(cwd)
cwd = cwd['average_cwd']
# cdd 읽기
cdd = 'https://github.com/swany00/2024_CML/raw/refs/heads/main/combined_extreme_rainfall_average_cdd.nc'
cdd = xr.open_dataset(cdd)
cdd = cdd['average_cdd']

# r95 읽기
r95 = 'https://github.com/swany00/2024_CML/raw/refs/heads/main/combined_extreme_rainfall_average_r95.nc'
r95 = xr.open_dataset(r95)
r95 = r95['average_r95']

# r99 읽기
r99 = 'https://github.com/swany00/2024_CML/raw/refs/heads/main/combined_extreme_rainfall_average_r99.nc'
r99 = xr.open_dataset(r99)
r99 = r99['average_r99']

# rx1day 읽기
rx1day = 'https://github.com/swany00/2024_CML/raw/refs/heads/main/combined_extreme_rainfall_average_rx1day.nc'
rx1day = xr.open_dataset(rx1day)
rx1day = rx1day['average_rx1day']

# rx5day 읽기
rx5day = 'https://github.com/swany00/2024_CML/raw/refs/heads/main/combined_extreme_rainfall_average_rx5day.nc'
rx5day = xr.open_dataset(rx5day)
rx5day = rx5day['average_rx5day']



#--#
url = 'https://raw.githubusercontent.com/guebin/DV2022/main/posts/Energy/{}.csv'
prov = ['Seoul', 'Busan', 'Daegu', 'Incheon', 
        'Gwangju', 'Daejeon', 'Ulsan', 'Sejongsi', 
        'Gyeonggi-do', 'Gangwon-do', 'Chungcheongbuk-do', 
        'Chungcheongnam-do', 'Jeollabuk-do', 'Jeollanam-do', 
        'Gyeongsangbuk-do', 'Gyeongsangnam-do', 'Jeju-do']
df = pd.concat([pd.read_csv(url.format(p+y)).assign(년도=y, 시도=p) for p in prov for y in ['2018', '2019', '2020', '2021']]).reset_index(drop=True)\
.assign(년도 = lambda df: df.년도.astype(int))\
.set_index(['년도','시도','지역']).applymap(lambda x: int(str(x).replace(',','')))\
.reset_index()
df_global = pd.DataFrame([l['properties'] for l in global_dict['features']])
df_local = pd.DataFrame([l['properties'] for l in local_dict['features']])
df_json = df_local.set_index('name')\
.rename(
    {name:name.split('시')[-1] for name in df_local['name'] if ('시' in name) and ('구' in name) and (len(name)>3)}
).reset_index()\
.drop(['base_year','name_eng'],axis=1)\
.rename({'name':'name_local','code':'code_local'},axis=1)\
.assign(code = lambda df: df['code_local'].str[:2])\
.merge(df_global.drop(['base_year','name_eng'],axis=1))
df_left = df.assign(
    시도 = lambda df: df.시도.map({l['properties']['name_eng']:l['properties']['name'] for l in global_dict['features']})
).assign(on = lambda df: df.시도 + '-' + df.지역)
df_right = df_json.assign(on = lambda df: df.name + '-' + df.name_local)\
.drop(['name_local','name'],axis=1)
df2 = df_left.merge(
    df_right.set_index('on')\
    .rename({'인천광역시-남구':'인천광역시-미추홀구'})\
    .reset_index()
).drop(['on'],axis=1)

# CSV 파일 URL 경로 지정
file_url = 'https://raw.githubusercontent.com/swany00/2024_CML/refs/heads/main/FAOSTAT_data_isocode_1991-2020.csv'
# GeoJSON 데이터를 URL에서 받아오기
geo_url = 'https://raw.githubusercontent.com/swany00/2024_CML/refs/heads/main/World_Countries__Generalized_.geojson'
geo_data = json.loads(requests.get(geo_url).text)

# URL에서 파일 읽기
df = pd.read_csv(file_url)

# 데이터에서 필요한 열 선택
tdf = df.iloc[:, [2, 9, 11]]

folium.Choropleth(geo_data = geo_data)
m = folium.Map(location = [0, -160], zoom_start = 2,
               max_bounds = True, 
               min_zoom = 2, min_lat = -84, 
               max_lat = 84, min_lon = -175, max_lon = 187)
folium.Choropleth(geo_data = geo_data, 
             data = tdf,
             columns = ['Area Code (ISO2)','Value'], key_on = 'properties.ISO',
             highlight = True,
             fill_color = 'RdYlGn', fill_opacity = 0.7, line_opacity = 0.5,
             legend_name = '곡물수확량').add_to(m)


```

# 데이터탐색

```{python}
#| title: 에너지사용량 자료 
import itables 
itables.show(df2,showIndex=False)
```

# 시각화 {orientation="columns" scrolling="true"}

## Column {width=50%}

```{python}
m
```

## Column {width=50%}

```{python}
#| title: 2018~2019년도 전기사용량 (서울)
seoul_dict = local_dict.copy() 
seoul_dict['features'] = [l for l in seoul_dict['features'] if l['properties']['code'][:2] == '11']
fig = px.choropleth_mapbox(
    geojson = seoul_dict,
    featureidkey = 'properties.code',
    data_frame = df2,
    locations = 'code_local',
    color = '에너지사용량(TOE)/전기',
    animation_frame= '년도',
    hover_data = ['시도','지역'],
    #---#
    mapbox_style="carto-positron",
    range_color = [0,400000],
    center={"lat": 37.5642135, "lon": 127.0016985},
    zoom=9,
)
fig.show(config={'scrollZoom':False})
```

```{python}
#| title: 2018~2019년도 에너지사용량 (전국)
fig = df2.drop(['code_local','code'],axis=1)\
.set_index(['년도','시도','지역','건물동수','연면적']).stack().reset_index()\
.rename({'level_5':'에너지종류', 0:'에너지사용량'},axis=1)\
.assign(에너지종류 = lambda df: df['에너지종류'].str.split('/').str[-1])\
.groupby(['년도','시도','에너지종류']).agg({'에너지사용량':'sum'})\
.stack().reset_index()\
.rename({0:'에너지사용량'},axis=1)\
.plot.area(
    x='년도',y='에너지사용량',
    color='시도',
    facet_col='에너지종류'
)
fig.update_layout(
    xaxis_domain=[0.0, 0.25],
    xaxis2_domain=[0.35, 0.60],
    xaxis3_domain=[0.70, 0.95]
)
```
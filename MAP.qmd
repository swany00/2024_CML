---
title: "극한강수에 따른 피해량 분석"
author: "기후논문반"
format: dashboard
execute: 
  enabled: true
  cache: false
  freeze: false
  error: true
---

```{python}
#| output: false
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.io as pio
import json
import requests
import folium
import json
import pandas as pd
import xarray as xr
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from IPython.display import HTML  # Jupyter 환경에서 애니메이션을 시각화
import numpy as np

# URL에서 파일 읽기
file_url = 'https://raw.githubusercontent.com/swany00/2024_CML/refs/heads/main/FAOSTAT_data_isocode_1991-2020.csv'
geo_url = 'https://raw.githubusercontent.com/swany00/2024_CML/refs/heads/main/World_Countries__Generalized_.geojson'
# GeoJSON 데이터 로드
geo_data = json.loads(requests.get(geo_url).text)

com_product_idx = 'https://github.com/swany00/2024_CML/raw/refs/heads/main/combined_production_index.json'
com_product_idx = json.loads(requests.get(com_product_idx).text)
production_index = com_product_idx['data_vars']
production_index_values = list(production_index.values())[0]['data']
production_index_values=np.array(production_index_values)

# 데이터 읽기
df = pd.read_csv(file_url)

# 필요한 열 선택
tdf = df.iloc[:, [2, 9, 11]]

# 지도 생성
m = folium.Map(location=[0, -160], zoom_start=1,
               max_bounds=True,
               min_zoom=1,max_zoom=5, min_lat=-84, max_lat=84, min_lon=-175, max_lon=187)

# Choropleth 지도 생성
# Choropleth 객체를 변수에 할당
choropleth_map = folium.Choropleth(
    geo_data=geo_data,
    data=tdf,
    columns=['Area Code (ISO2)', 'Value'],
    key_on='properties.ISO',  # geo_data의 ISO 속성에 매칭
    highlight=True,
    fill_color='RdYlGn',
    fill_opacity=0.7,
    line_opacity=0.5,
    legend_name='국가별 농업 총 생산지수'
)

# choropleth_map을 지도에 추가
choropleth_map.add_to(m)


# 툴팁 추가: 각 지역에 해당 값 표시
for i in range(len(geo_data['features'])):
    area_code = geo_data['features'][i]['properties']['ISO']
    
    # 전체 데이터의 평균값을 계산
    avg_value = tdf[tdf['Area Code (ISO2)'] == area_code]['Value'].mean()
    
    # 툴팁 내용 설정 (예: 평균값만 표시)
    tooltip_content = f'{area_code}: 평균 {avg_value:.2f}'
    
    # GeoJSON 데이터 객체
    geo_json_str = geo_data['features'][i]
    
    # GeoJson 객체를 aa에 할당
    aa = folium.GeoJson(
        geo_json_str,
        tooltip=folium.Tooltip(tooltip_content)  # 툴팁 객체 설정
    )

    # aa를 지도에 추가
    aa.add_to(m)

```

# 기후데이터

```{python}
#| output: false
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import xarray as xr
from IPython.display import HTML

# 파일 경로 설정
file_path_r95 = '/root/notenotenote/r95_era5_1991-2020.nc'
file_path_r99 = '/root/notenotenote/r99_era5_1991-2020.nc'
file_path_rx1day = '/root/notenotenote/rx1day_era5_1991-2020.nc'
file_path_rx5day = '/root/notenotenote/rx5day_era5_1991-2020.nc'
file_path_cwd = '/root/notenotenote/cwd_era5_1991-2020.nc'
file_path_cdd = '/root/notenotenote/cdd_era5_1991-2020.nc'

# 데이터 로드
r95 = xr.open_dataset(file_path_r95, decode_times=False)['r95'].values
r99 = xr.open_dataset(file_path_r99, decode_times=False)['r99'].values
rx1day = xr.open_dataset(file_path_rx1day, decode_times=False)['rx1day'].values
rx5day = xr.open_dataset(file_path_rx5day, decode_times=False)['rx5day'].values
cwd = xr.open_dataset(file_path_cwd, decode_times=False)['cwd'].values
cdd = xr.open_dataset(file_path_cdd, decode_times=False)['cdd'].values

# 데이터셋의 시간, 위도, 경도 차원 확인 (시간 차원은 첫 번째 차원)
time_len, lat_len, lon_len = r95.shape  # r95와 다른 데이터들이 동일한 shape을 가질 것으로 가정

# 시각화 설정
fig, axes = plt.subplots(2, 3, figsize=(10, 6), dpi=80)  # 2행 3열로 서브플롯 설정

# 데이터셋과 이름을 매칭하는 리스트
data_list = [r95, r99, rx1day, rx5day, cwd, cdd]
titles = ['r95', 'r99', 'rx1day', 'rx5day', 'cwd', 'cdd']

# 각 서브플롯에 대한 초기화
caxs = []
for ax, data, title in zip(axes.flat, data_list, titles):
    cax = ax.imshow(data[0], cmap='coolwarm', animated=True)
    ax.set_title(f"{title} at Time: 0")
    ax.axis('off')  # 축을 보이지 않게 설정
    caxs.append(cax)

# 컬러바 추가
for i, ax in enumerate(axes.flat):
    fig.colorbar(caxs[i], ax=ax, orientation='vertical', label='Value')

# 타이틀 설정
fig.suptitle("Climate Data Over Time", fontsize=16)

# 프레임 업데이트 함수 정의
def update_frame(frame):
    # 각 시간 프레임에서 데이터를 업데이트
    for i, (ax, data, title) in enumerate(zip(axes.flat, data_list, titles)):
        caxs[i].set_array(data[frame])  # 각 데이터셋에 대한 시각화를 업데이트
        ax.set_title(f"{title} at YEAR: {1991+frame}")  # 타이틀 업데이트
    return caxs

# 애니메이션 생성
ani = animation.FuncAnimation(fig, update_frame, frames=range(time_len), interval=100, blit=True)

# HTML로 애니메이션을 저장
html_animation = ani.to_jshtml()
html_animation = html_animation.replace('<video ', '<video autoplay loop width="800" height="600" ')

# 플롯 닫기
plt.close(fig)
```

```{python}
#| title: 극한강수지수 및 가뭄지수
# HTML로 애니메이션 표시
HTML(html_animation)

print("1. r95: 일일 강수량에서 상위 5%에 해당하는 값. 극단적인 폭우를 분석할 때 사용.")
print("2. r99: 일일 강수량에서 상위 1%에 해당하는 값. 극단적인 폭우나 홍수를 분석할 때 사용.")
print("3. rx1day: 관측 기간 동안 가장 많은 강수량. 큰 폭우가 발생한 날 분석.")
print("4. rx5day: 연속된 5일 동안의 최대 강수량. 집중적인 강수 이벤트 분석.")
print("5. cwd: 연속적으로 비가 내린 날 수. 지속적인 비가 내리는 기간 분석.")
print("6. cdd: 연속적인 건조한 날 수. 가뭄 및 건조 기간 분석.")

```


# 피해지수데이터

```{python}
#| title: 국가별 농업 총 생산지수 

import matplotlib.pyplot as plt
import numpy as np
import matplotlib.animation as animation
from IPython.display import HTML
from matplotlib.colors import TwoSlopeNorm

fig, axs = plt.subplots(1, 1, figsize=(10, 6), dpi=80, constrained_layout=True)

# 데이터 차이의 최소, 최대값을 계산
diff_data = production_index_values[0] - production_index_values[24]
vmin, vmax = diff_data.min(), diff_data.max()

# 중심을 0으로 설정한 노말라이저를 사용해 colorbar 생성
norm = TwoSlopeNorm(vmin=vmin, vcenter=0, vmax=vmax)
im11 = axs.imshow(diff_data, cmap='coolwarm', norm=norm, alpha=1, origin='lower')
cbar = fig.colorbar(im11, ax=axs)
cbar.set_label('Production Index Difference')

# x축과 y축 눈금 제거
axs.set_xticks([])
axs.set_yticks([])

# 애니메이션 업데이트 함수
def update(i):
    im11.set_data(production_index_values[i]-production_index_values[24])  # 프레임에 맞는 데이터로 업데이트
    axs.set_title(f'Year {i + 1991} - Production Index', fontsize=24)  # 제목 업데이트

# 애니메이션 생성
ani = animation.FuncAnimation(fig, update, frames=len(production_index_values), interval=400)

# 애니메이션을 HTML로 변환하여 표시
html_animation = ani.to_jshtml()
html_animation = html_animation.replace('<video ', '<video autoplay loop width="600" height="450" ')

plt.close(fig)

# 애니메이션을 HTML로 표시
HTML(html_animation)
print("목적: 기후변화에 따른 피해량 산출을 위한 자료.")
print("소개: 2015년 기준 농업 생산량을 100으로 설정, 30년간 국가별 농업 생산량 증감 평균 지도.")
print("양수 값: 해당 연도 생산량이 2015년보다 높음 (더 많은 농산물 생산).")
print("음수 값: 해당 연도 생산량이 2015년보다 낮음 (생산량 감소).")
print("0 값: 해당 연도 생산량이 2015년과 동일.")
print("출처: FAOSTAT Database.")

```

# 데이터 경향성 분석

```{python}
#| title: 경향성분석
file_path_r95 = '/root/notenotenote/r95_era5_1991-2020.nc'
file_path_r99 = '/root/notenotenote/r99_era5_1991-2020.nc'
file_path_rx1day = '/root/notenotenote/rx1day_era5_1991-2020.nc'
file_path_rx5day = '/root/notenotenote/rx5day_era5_1991-2020.nc'
file_path_cwd = '/root/notenotenote/cwd_era5_1991-2020.nc'
file_path_cdd = '/root/notenotenote/cdd_era5_1991-2020.nc'

# 데이터 로드
r95 = xr.open_dataset(file_path_r95, decode_times=False)['r95'].values
r99 = xr.open_dataset(file_path_r99, decode_times=False)['r99'].values
rx1day = xr.open_dataset(file_path_rx1day, decode_times=False)['rx1day'].values
rx5day = xr.open_dataset(file_path_rx5day, decode_times=False)['rx5day'].values
cwd = xr.open_dataset(file_path_cwd, decode_times=False)['cwd'].values
cdd = xr.open_dataset(file_path_cdd, decode_times=False)['cdd'].values
# 그래프 그리기 함수
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter

def plot_extreme_rainfall_graphs(production_index_values, cwd, cdd, r95, r99, rx1day, rx5day):
    """
    각 extreme rainfall 데이터를 기반으로 그래프를 그리는 함수입니다.
    """
    # x축을 1부터 30년으로 설정
    years = np.arange(1991, 2021)
    
    # 기준 값 (production_index_values[14]) 계산
    piv15 = np.nansum(production_index_values[14])

    # 각 데이터 항목의 연도별 합계 계산 후 piv15 빼기
    po = [np.nansum(rx1day[i]) for i in range(30)]
    co = [np.nansum(rx5day[i]) for i in range(30)]
    cdd_sum = [np.nansum(cdd[i]) for i in range(30)]
    cwd_sum = [np.nansum(cwd[i]) for i in range(30)]
    r95_sum = [np.nansum(r95[i]) for i in range(30)]
    r99_sum = [np.nansum(r99[i]) for i in range(30)]
    production_index_sum = [np.nansum(production_index_values[i])-piv15 for i in range(30)]

    # 서브플롯을 키우기 위해서 figsize 설정
    fig, axs = plt.subplots(3, 2, figsize=(25, 20), dpi=80)  # 그래프 크기를 더 크게 설정

    # Formatter 설정 (천 단위 구분 및 가독성 좋은 형식)
    def thousands_formatter(x, pos):
        return f'{x*1e-6:.1f}M'  # 1,000,000 단위로 표기

    # R95 그래프
    axs[0, 0].plot(years, r95_sum, marker='o', color='c', label='R95')
    axs[0, 0].set_xlabel('Years', fontsize=12)
    axs[0, 0].set_ylabel('R95 Sum', fontsize=12)
    axs[0, 0].set_title('R95 Sum', fontsize=14)
    axs[0, 0].grid(True)
    axs[0, 0].legend()
    axs[0, 0].yaxis.set_major_formatter(FuncFormatter(thousands_formatter))

    # R99 그래프
    axs[0, 1].plot(years, r99_sum, marker='o', color='m', label='R99')
    axs[0, 1].set_xlabel('Years', fontsize=12)
    axs[0, 1].set_ylabel('R99 Sum', fontsize=12)
    axs[0, 1].set_title('R99 Sum', fontsize=14)
    axs[0, 1].grid(True)
    axs[0, 1].legend()
    axs[0, 1].yaxis.set_major_formatter(FuncFormatter(thousands_formatter))

    # RX1DAY 그래프
    axs[1, 1].plot(years, po, marker='o', color='y', label='RX1DAY')
    axs[1, 1].set_xlabel('Years', fontsize=12)
    axs[1, 1].set_ylabel('RX1DAY Sum', fontsize=12)
    axs[1, 1].set_title('RX1DAY Sum', fontsize=14)
    axs[1, 1].grid(True)
    axs[1, 1].legend()
    axs[1, 1].yaxis.set_major_formatter(FuncFormatter(thousands_formatter))

    # RX5DAY 그래프
    fig2, ax2 = plt.subplots(figsize=(10, 6))
    axs[2,1].plot(years, co, marker='o', color='purple', label='RX5DAY')
    axs[2,1].set_xlabel('Years', fontsize=12)
    axs[2,1].set_ylabel('RX5DAY Sum', fontsize=12)
    axs[2,1].set_title('RX5DAY Sum', fontsize=14)
    axs[2,1].grid(True)
    axs[2,1].legend()
    axs[2,1].yaxis.set_major_formatter(FuncFormatter(thousands_formatter))

    # CWD 그래프
    axs[1, 0].plot(years, cwd_sum, marker='o', color='g', label='CWD')
    axs[1, 0].set_xlabel('Years', fontsize=12)
    axs[1, 0].set_ylabel('CWD Sum', fontsize=12)
    axs[1, 0].set_title('CWD Sum', fontsize=14)
    axs[1, 0].grid(True)
    axs[1, 0].legend()
    axs[1, 0].yaxis.set_major_formatter(FuncFormatter(thousands_formatter))

    # CDD 그래프
    axs[2, 0].plot(years, cdd_sum, marker='o', color='r', label='CDD')
    axs[2, 0].set_xlabel('Years', fontsize=12)
    axs[2, 0].set_ylabel('CDD Sum', fontsize=12)
    axs[2, 0].set_title('CDD Sum', fontsize=14)
    axs[2, 0].grid(True)
    axs[2, 0].legend()
    axs[2, 0].yaxis.set_major_formatter(FuncFormatter(thousands_formatter))

    # Production Index 그래프
    ax2.plot(years, production_index_sum, marker='o', color='b', label='Production Index')
    ax2.set_xlabel('Years', fontsize=12)
    ax2.set_ylabel('Production Index Sum', fontsize=12)
    ax2.set_title('Production Index Sum', fontsize=14)
    ax2.grid(True)
    ax2.legend()
    ax2.yaxis.set_major_formatter(FuncFormatter(thousands_formatter))


    # 서브플롯 간 간격을 넓히기 위해서 adjust 사용
    plt.subplots_adjust(hspace=0.5, wspace=0.4)  # 서브플롯 간 간격을 넓힘

    # 그래프 렌더링
    plt.tight_layout()
    plt.show()


plot_extreme_rainfall_graphs(production_index_values, cwd, cdd, r95, r99, rx1day, rx5day)


```

# 참고자료

```{python}
#| title: 2015년 기준 국가별 농업 총 생산지수 


# 지도 출력
m
```
